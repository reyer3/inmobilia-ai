name: Inmobilia CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Permite ejecución manual

jobs:
  code_quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'  # Actualización a Python 3.13
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 flake8-docstrings flake8-import-order mypy black isort bandit

      - name: Check code formatting with Black
        run: black --check src/ tests/

      - name: Check import order with isort
        run: isort --check src/ tests/

      - name: Lint with flake8
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --max-complexity=10 --max-line-length=100 --statistics --exit-zero

      - name: Static type checking with mypy
        run: mypy --ignore-missing-imports src/

      - name: Security check with bandit
        run: bandit -r src/ -x tests/ --skip B101 --format txt

  tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: code_quality
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'  # Actualización a Python 3.13
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock coverage

      - name: Run tests with pytest
        run: |
          pytest --cov=src tests/ --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

  security_scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: code_quality
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'  # Actualización a Python 3.13
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety

      - name: Check for vulnerable dependencies
        run: safety check

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'  # Actualización a Python 3.13
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install sphinx sphinx-rtd-theme

      - name: Create docs directory if not exists
        run: mkdir -p docs

      - name: Generate API documentation
        run: |
          cd docs
          sphinx-quickstart -q -p "Inmobilia AI" -a "Inmobilia Team" --ext-autodoc --ext-viewcode --ext-napoleon
          sphinx-apidoc -o . ../src
          cd ..

      - name: Build documentation
        run: |
          cd docs
          make html

      - name: Deploy documentation to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html

  build_and_package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [tests, security_scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'  # Actualización a Python 3.13
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Build package
        run: python -m build

      - name: Store package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: package-artifacts
          path: dist/

  deploy_to_dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build_and_package]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'  # Actualización a Python 3.13

      - name: Download package artifacts
        uses: actions/download-artifact@v3
        with:
          name: package-artifacts
          path: dist/

      - name: Deploy to Development Environment
        run: |
          echo "Desplegando a entorno de desarrollo..."
          # Aquí iría el script de despliegue al servidor de desarrollo

  deploy_to_prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build_and_package]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'  # Actualización a Python 3.13
      
      - name: Download package artifacts
        uses: actions/download-artifact@v3
        with:
          name: package-artifacts
          path: dist/
      
      - name: Deploy to Production
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Desplegando a producción..."
          # Aquí iría el script de despliegue al servidor de producción
